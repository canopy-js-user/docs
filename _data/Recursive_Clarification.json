{
 "displayTopicName": "Recursive Clarification",
 "topicTokens": [
  {
   "text": "Recursive Clarification",
   "type": "text"
  }
 ],
 "paragraphsBySubtopic": {
  "Recursive Clarification": [
   {
    "text": "Recursive clarification is the idea that ",
    "type": "text"
   },
   {
    "text": "explainers must provide conceptual prerequisites",
    "type": "local",
    "tokens": [
     {
      "text": "explainers must provide conceptual prerequisites",
      "type": "text"
     }
    ],
    "targetSubtopic": "Explainers must provide conceptual prerequisites",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Recursive Clarification"
   },
   {
    "text": ", and whereas the most common solution is to use a ",
    "type": "text"
   },
   {
    "text": "topological sort",
    "type": "local",
    "tokens": [
     {
      "text": "topological sort",
      "type": "text"
     }
    ],
    "targetSubtopic": "Topological sort",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Recursive Clarification"
   },
   {
    "text": ", there are ",
    "type": "text"
   },
   {
    "text": "downsides to topological sort",
    "type": "local",
    "tokens": [
     {
      "text": "downsides to topological sort",
      "type": "text"
     }
    ],
    "targetSubtopic": "Downsides to topological sort",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Recursive Clarification"
   },
   {
    "text": ", and so Canopy allows readers to ",
    "type": "text"
   },
   {
    "text": "access prerequisites through recursion",
    "type": "local",
    "tokens": [
     {
      "text": "access prerequisites through recursion",
      "type": "text"
     }
    ],
    "targetSubtopic": "Access prerequisites through recursion",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Recursive Clarification"
   },
   {
    "text": ", and there are ",
    "type": "text"
   },
   {
    "text": "benefits to using recursion",
    "type": "local",
    "tokens": [
     {
      "text": "benefits to using recursion",
      "type": "text"
     }
    ],
    "targetSubtopic": "Benefits to using recursion",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Recursive Clarification"
   },
   {
    "text": ".",
    "type": "text"
   }
  ],
  "Explainers must provide conceptual prerequisites": [
   {
    "text": "Most concepts require other concepts in order to understand them, and so when an explainer wants to explain something, they're also going to need to impart all the various concepts that are prerequisite for the given idea.",
    "type": "text"
   }
  ],
  "Topological sort": [
   {
    "text": "Topological sort entails taking a set of ideas and their prerequisites and producing a linear ordering in which every prerequisite comes before every idea that requires it. So, the explainer would explain all the simpler ideas first, and only later would attempt to explain the more complex ideas that require the simpler ones. This is the approach followed by most books and lectures.",
    "type": "text"
   }
  ],
  "Downsides to topological sort": [
   {
    "text": "Two downsides of topological sort is that it ",
    "type": "text"
   },
   {
    "text": "produces redundant explanations",
    "type": "local",
    "tokens": [
     {
      "text": "produces redundant explanations",
      "type": "text"
     }
    ],
    "targetSubtopic": "Produces redundant explanations",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Downsides to topological sort"
   },
   {
    "text": ", it ",
    "type": "text"
   },
   {
    "text": "produces unnecessary explanation",
    "type": "local",
    "tokens": [
     {
      "text": "produces unnecessary explanation",
      "type": "text"
     }
    ],
    "targetSubtopic": "Produces unnecessary explanation",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Downsides to topological sort"
   },
   {
    "text": ", and that it fails to communicate ",
    "type": "text"
   },
   {
    "text": "the motivation for prerequisites",
    "type": "local",
    "tokens": [
     {
      "text": "the motivation for prerequisites",
      "type": "text"
     }
    ],
    "targetSubtopic": "The motivation for prerequisites",
    "targetTopic": "Recursive Clarification",
    "enclosingTopic": "Recursive Clarification",
    "enclosingSubtopic": "Downsides to topological sort"
   },
   {
    "text": ".",
    "type": "text"
   }
  ],
  "Produces redundant explanations": [
   {
    "text": "If all the prerequisites of every idea are front-loaded, then if the reader reads multiple ideas that require the same prerequisite, the reader will be shown that prerequisite every time, even if they already know it.",
    "type": "text"
   }
  ],
  "Produces unnecessary explanation": [
   {
    "text": "If all the prerequisites of every idea are always shown before the given idea, then a reader who already knows some of them is forced to wade through information that they already know in order to find the information they don't.",
    "type": "text"
   }
  ],
  "The motivation for prerequisites": [
   {
    "text": "If prerequisites are given before the ideas that require them, then the reader isn't entirely clear on why they are learning the idea, as opposed to trying to learn the complex idea, failing due to the lack of the prerequisite, and then going on a tangent to learn the prerequisite in order to learn the given idea.",
    "type": "text"
   }
  ],
  "Access prerequisites through recursion": [
   {
    "text": "In Canopy, if a concept requires other concepts, they are not \"front-loaded\", but rather are referenced as if the reader already knows them, and if the reader doesn't, they may burrow into additional explanation of those prerequisites, and the prerequisites of the prerequisites, etc.",
    "type": "text"
   }
  ],
  "Benefits to using recursion": [
   {
    "text": "If the writer assumes the reader has the required background knowledge and the reader must opt in to further explanation, then there is never a problem of over-explaining. Also, because the complex idea was shown first, it is clear to the reader why they are learning the required prerequisite and they will have motivation to learn it.",
    "type": "text"
   }
  ]
 }
}