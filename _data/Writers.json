{"displayTopicName":"Writers","topicTokens":[{"text":"Writers","type":"text"}],"paragraphsBySubtopic":{"Writers":[{"text":"Writers use Canopy by ","type":"text"},{"text":"creating a Canopy project","type":"local","tokens":[{"text":"creating a Canopy project","type":"text"}],"targetSubtopic":"Creating a Canopy project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":", ","type":"text"},{"text":"adding content to their project","type":"local","tokens":[{"text":"adding content to their project","type":"text"}],"targetSubtopic":"Adding content to their project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":" that follows ","type":"text"},{"text":"best practices","type":"global","tokens":[{"text":"best practices","type":"text"}],"pathString":"Best_practices","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":", ","type":"text"},{"text":"building their project","type":"local","tokens":[{"text":"building their project","type":"text"}],"targetSubtopic":"Building their project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":", ","type":"text"},{"text":"serving their project locally","type":"local","tokens":[{"text":"serving their project locally","type":"text"}],"targetSubtopic":"Serving their project locally","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":" and ","type":"text"},{"text":"deploying the project","type":"local","tokens":[{"text":"deploying the project","type":"text"}],"targetSubtopic":"Deploying the project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Writers"},{"text":".","type":"text"}],"Creating a Canopy project":[{"text":"Creating a Canopy project involves ","type":"text"},{"text":"creating a project directory","type":"local","tokens":[{"text":"creating a project directory","type":"text"}],"targetSubtopic":"Creating a project directory","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Creating a Canopy project"},{"text":", ","type":"text"},{"text":"initializing the project","type":"local","tokens":[{"text":"initializing the project","type":"text"}],"targetSubtopic":"Initializing the project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Creating a Canopy project"},{"text":", and optionally ","type":"text"},{"text":"initializing version control","type":"local","tokens":[{"text":"initializing version control","type":"text"}],"targetSubtopic":"Initializing version control","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Creating a Canopy project"},{"text":".","type":"text"}],"Creating a project directory":[{"text":"Creating the project directory is done by creating a directory, eg running ","type":"text"},{"type":"inline_code","text":"mkdir my_project"},{"text":" on a Unix-like system. There is nothing special about the type of directory.","type":"text"}],"Initializing the project":[{"text":"To initialize a project, enter the project directory (","type":"text"},{"type":"inline_code","text":"cd"},{"text":" on a Unix system), then run ","type":"text"},{"type":"inline_code","text":"canopy init"},{"text":". The ","type":"text"},{"text":"Canopy CLI init command","type":"global","tokens":[{"text":"Canopy CLI init command","type":"text"}],"pathString":"Canopy_CLI_init_command","enclosingTopic":"Writers","enclosingSubtopic":"Initializing the project"},{"text":" creates various files and folders that are necessary for your Canopy project. Initializing the project entails selecting a ","type":"text"},{"text":"default topic","type":"global","tokens":[{"text":"default topic","type":"text"}],"pathString":"Default_Topic","enclosingTopic":"Writers","enclosingSubtopic":"Initializing the project"},{"text":".","type":"text"}],"Initializing version control":[{"text":"At this point you might want to run a ","type":"text"},{"type":"inline_code","text":"git init"},{"text":" in your project directory and store your project on a service like Github. Storing your project on a hosting service like Github makes it easier to host and deploy your project when it changes.","type":"text"}],"Adding content to their project":[{"text":"Content is added to a Canopy project by creating files that follow the ","type":"text"},{"text":"Canopy data model","type":"global","tokens":[{"text":"Canopy data model","type":"text"}],"pathString":"Canopy_Data_Model","enclosingTopic":"Writers","enclosingSubtopic":"Adding content to their project"},{"text":" and using ","type":"text"},{"text":"Canopy markup","type":"local","tokens":[{"text":"Canopy markup","type":"text"}],"targetSubtopic":"Canopy markup","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Adding content to their project"},{"text":". There are several ","type":"text"},{"text":"methods of producing content","type":"local","tokens":[{"text":"methods of producing content","type":"text"}],"targetSubtopic":"Methods of producing content","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Adding content to their project"},{"text":". Authors can follow ","type":"text"},{"text":"best practices","type":"global","tokens":[{"text":"best practices","type":"text"}],"pathString":"Best_practices","enclosingTopic":"Writers","enclosingSubtopic":"Adding content to their project"},{"text":" in deciding how to model their ideas in the Canopy data model.","type":"text"}],"Methods of producing content":[{"text":"Content can be produced by ","type":"text"},{"text":"manually creating topic files","type":"local","tokens":[{"text":"manually creating topic files","type":"text"}],"targetSubtopic":"Manually creating topic files","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Methods of producing content"},{"text":", or using the ","type":"text"},{"text":"Canopy CLI bulk command","type":"global","tokens":[{"text":"Canopy CLI bulk command","type":"text"}],"pathString":"Canopy_CLI_bulk_command","enclosingTopic":"Writers","enclosingSubtopic":"Methods of producing content"},{"text":".","type":"text"}],"Manually creating topic files":[{"tokens":[{"text":"If you create a file in your ","type":"text"},{"type":"inline_code","text":"topics"},{"text":" directory like ","type":"text"},{"type":"inline_code","text":"project/topics/category/topic.expl"},{"text":", and you add a root paragraph to the file like this:","type":"text"}],"type":"text-line"},{"type":"code_block","text":"\nTopic: This is a paragraph for the topic \"Topic.\"\n"},{"text":"Then, when you build your project, this topic can be viewed in the web interface.","type":"text"}],"Canopy markup":[{"text":"Typical markdown-style styling is available, such as lists, code blocks, tables, footnotes, block quotes, and styling characters. Inline HTML is supported. Asterisks indicate bold and underscores indicate italics.","type":"text"}],"Building their project":[{"text":"Building your Canopy project entails taking the ","type":"text"},{"type":"inline_code","text":"expl"},{"text":" files and generating JSON from them that can be used by the front-end client. You can build your project by navigating to your project directory and running the ","type":"text"},{"text":"Canopy CLI build command","type":"global","tokens":[{"text":"Canopy CLI build command","type":"text"}],"pathString":"Canopy_CLI_build_command","enclosingTopic":"Writers","enclosingSubtopic":"Building their project"},{"text":".","type":"text"}],"Serving their project locally":[{"text":"To serve your Canopy project locally, navigate to your project folder and running the ","type":"text"},{"text":"Canopy CLI serve command","type":"global","tokens":[{"text":"Canopy CLI serve command","type":"text"}],"pathString":"Canopy_CLI_serve_command","enclosingTopic":"Writers","enclosingSubtopic":"Serving their project locally"},{"text":".","type":"text"}],"Deploying the project":[{"text":"There are various ways of deploying a Canopy project to an external hosting provider. Canopy's use of ","type":"text"},{"text":"cosmetic paths","type":"local","tokens":[{"text":"cosmetic paths","type":"text"}],"targetSubtopic":"Cosmetic paths","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Deploying the project"},{"text":" prevents it from being hosted on a simple static assets server, however, there are several ways of overcoming this limitation and ","type":"text"},{"text":"hosting a Canopy project","type":"local","tokens":[{"text":"hosting a Canopy project","type":"text"}],"targetSubtopic":"Hosting a Canopy project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Deploying the project"},{"text":", and there are resources for ","type":"text"},{"text":"continuously building a Canopy project","type":"local","tokens":[{"text":"continuously building a Canopy project","type":"text"}],"targetSubtopic":"Continuously building a Canopy project","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Deploying the project"},{"text":".","type":"text"}],"Cosmetic paths":[{"text":"When reading a Canopy website, the URL adapts to reflect the path of topics and subtopics that the reader has navigated through. The URL of the page might for example read ","type":"text"},{"type":"inline_code","text":"www.example.com/Topic_1/Topic_2"},{"text":". However, if the site is hosted on a static assets server, the client will request a directory ","type":"text"},{"type":"inline_code","text":"Topic_1"},{"text":" that contains a directory ","type":"text"},{"type":"inline_code","text":"Topic_2"},{"text":", neither of which exists, when really we just want to serve the root ","type":"text"},{"type":"inline_code","text":"index.html"},{"text":" asset regardless of the requested path.","type":"text"}],"Hosting a Canopy project":[{"text":"In order to get around the problem of cosmetic paths, there are four ways of hosting a Canopy project, ","type":"text"},{"text":"dynamic server","type":"local","tokens":[{"text":"dynamic server","type":"text"}],"targetSubtopic":"Dynamic server","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Hosting a Canopy project"},{"text":", ","type":"text"},{"text":"hash URLs","type":"local","tokens":[{"text":"hash URLs","type":"text"}],"targetSubtopic":"Hash URLs","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Hosting a Canopy project"},{"text":", ","type":"text"},{"text":"symlinks","type":"local","tokens":[{"text":"symlinks","type":"text"}],"targetSubtopic":"Symlinks","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Hosting a Canopy project"},{"text":", or a ","type":"text"},{"text":"custom static hosting provider","type":"local","tokens":[{"text":"custom static hosting provider","type":"text"}],"targetSubtopic":"Custom static hosting provider","targetTopic":"Writers","enclosingTopic":"Writers","enclosingSubtopic":"Hosting a Canopy project"},{"text":".","type":"text"}],"Dynamic server":[{"text":"The simplest way of avoiding the problem of cosmetic paths is to not use a static assets server. The Canopy CLI ships with a dynamic Express server that will ignore request paths and serve the root ","type":"text"},{"type":"inline_code","text":"index.html"},{"text":" file for all requests. The downside of this option is that dynamic hosting is often more expensive than static assets hosting.","type":"text"}],"Hash URLs":[{"text":"Canopy has a build option called \"hash URLs\" that causes the project to prepend all paths with ","type":"text"},{"type":"inline_code","text":"/#/"},{"text":", making it irrelevant to the server what comes after the hash symbol. The downside of this approach is that it adds an extra character to all URLs.","type":"text"}],"Symlinks":[{"text":"Symlinks is build option that creates directories for every topic in the project and symlinks to every other topic directory, each of which contains the same ","type":"text"},{"type":"inline_code","text":"index.html"},{"text":" asset, so requests like ","type":"text"},{"type":"inline_code","text":"www.example.com/Topic_A/Topic_B"},{"text":" follow a valid directory path via the symlinks. The downside of this approach is that most hosting providers do not permit symlinks, and creating the directories and linking them is an O(N","type":"text"},{"type":"html_element","tokenInsertions":[],"html":"<sup>2</sup>"},{"text":") operation at build-time.","type":"text"}],"Custom static hosting provider":[{"text":"Some static asset hosting providers allow the webmaster to specify a redirect when a user requests a non-existent resource. This is the recommended option, and an example of this set up can be found in the ","type":"text"},{"type":"external","url":"https://github.com/canopy-js/example-workflows","text":"Canopy Github's \"example workflows\" repo","tokens":[{"text":"Canopy Github's \"example workflows\" repo","type":"text"}]},{"text":".","type":"text"}],"Continuously building a Canopy project":[{"text":"You might want to store your Canopy project on Github and trigger builds whenever an ","type":"text"},{"type":"inline_code","text":"expl"},{"text":" file is changed. Template Github workflows for continuously building a Canopy project hosted in a Github repository can be found on the ","type":"text"},{"type":"external","url":"https://github.com/canopy-js/example-workflows","text":"Canopy Github's \"example workflows\" repo","tokens":[{"text":"Canopy Github's \"example workflows\" repo","type":"text"}]},{"text":".","type":"text"}]}}