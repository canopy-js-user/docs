{
 "displayTopicName": "How Canopy corresponds to memory",
 "topicTokens": [
  {
   "text": "How Canopy corresponds to memory",
   "type": "text"
  }
 ],
 "paragraphsBySubtopic": {
  "How Canopy corresponds to memory": [
   {
    "text": "It seems that ",
    "type": "text"
   },
   {
    "text": "memory only supports one for one recall",
    "type": "local",
    "tokens": [
     {
      "text": "memory only supports one for one recall",
      "type": "text"
     }
    ],
    "targetSubtopic": "Memory only supports one for one recall",
    "targetTopic": "How Canopy corresponds to memory",
    "enclosingTopic": "How Canopy corresponds to memory",
    "enclosingSubtopic": "How Canopy corresponds to memory"
   },
   {
    "text": ", but ",
    "type": "text"
   },
   {
    "text": "most information is composed of trees",
    "type": "local",
    "tokens": [
     {
      "text": "most information is composed of trees",
      "type": "text"
     }
    ],
    "targetSubtopic": "Most information is composed of trees",
    "targetTopic": "How Canopy corresponds to memory",
    "enclosingTopic": "How Canopy corresponds to memory",
    "enclosingSubtopic": "How Canopy corresponds to memory"
   },
   {
    "text": ", and so people get around the one-for-one restriction by using ",
    "type": "text"
   },
   {
    "text": "generic predication",
    "type": "local",
    "tokens": [
     {
      "text": "generic predication",
      "type": "text"
     }
    ],
    "targetSubtopic": "Generic predication",
    "targetTopic": "How Canopy corresponds to memory",
    "enclosingTopic": "How Canopy corresponds to memory",
    "enclosingSubtopic": "How Canopy corresponds to memory"
   },
   {
    "text": " or through ",
    "type": "text"
   },
   {
    "text": "object reference",
    "type": "local",
    "tokens": [
     {
      "text": "object reference",
      "type": "text"
     }
    ],
    "targetSubtopic": "Object reference",
    "targetTopic": "How Canopy corresponds to memory",
    "enclosingTopic": "How Canopy corresponds to memory",
    "enclosingSubtopic": "How Canopy corresponds to memory"
   },
   {
    "text": ", and Canopy encourages the latter because ",
    "type": "text"
   },
   {
    "text": "object reference is more reliable",
    "type": "local",
    "tokens": [
     {
      "text": "object reference is more reliable",
      "type": "text"
     }
    ],
    "targetSubtopic": "Object reference is more reliable",
    "targetTopic": "How Canopy corresponds to memory",
    "enclosingTopic": "How Canopy corresponds to memory",
    "enclosingSubtopic": "How Canopy corresponds to memory"
   },
   {
    "text": ".",
    "type": "text"
   }
  ],
  "Memory only supports one for one recall": [
   {
    "text": "It seems as if memory can only associate one thought with one other thought.",
    "type": "text"
   }
  ],
  "Most information is composed of trees": [
   {
    "text": "Most information involves large hierarchical bodies of information, not just lists of one thing triggering recall of one more thing.",
    "type": "text"
   }
  ],
  "Generic predication": [
   {
    "text": "In generic predication, a person associates the name \"Fifi\" with \"dog\", associates the word \"dog\" with \"has owner,\" and so when \"Fifi\" comes to mind, the person can use the associated value \"dog\" to retrieve the generically expectation of \"owner\", and can turn around and compose a further query, \"Fifi's owner\", and now we have a key to make a further request to long-term memory. Thus, even though memory is only associating one thing with each name, by incorporating generic types we can store further specification under related keys and hope that we reconstruct them again next time.",
    "type": "text"
   }
  ],
  "Object reference": [
   {
    "text": "Object reference is when I associate names with large multi-part sentences that explicitly include references to all subordinate concepts. So \"Fifi\" would be associated with the sentence \"is a dog with an owner and a collar\", and \"Fifi's owner\" will be associated with Bob, etc. Thus, object reference is similar to generic predication, except the found associations are stored in the value of the key itself. Each value has a size limit, and so if there are many associated properties or relations, they will have to be broken up into a series of sub-entities that in turn have further object references, etc.",
    "type": "text"
   }
  ],
  "Object reference is more reliable": [
   {
    "text": "Generic predication requires a person to construct a key for a lookup by combining generic information with an existing piece of data, but the generic information could itself be forgotten, so memorizing object references explicitly is a more reliable way of associating things in memory.",
    "type": "text"
   }
  ]
 }
}